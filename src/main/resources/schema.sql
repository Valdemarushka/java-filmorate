DROP TABLE IF EXISTS FilmGenre CASCADE;
DROP TABLE IF EXISTS Genre CASCADE;
DROP TABLE IF EXISTS Users CASCADE;
DROP TABLE IF EXISTS Film CASCADE;
DROP TABLE IF EXISTS MPA CASCADE;
DROP TABLE IF EXISTS Likes CASCADE;
DROP TABLE IF EXISTS Status CASCADE;
DROP TABLE IF EXISTS Friendship CASCADE;
DROP TABLE IF EXISTS StatusFriendship CASCADE;

CREATE TABLE if not exists Users
(
    id_user  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar(25),
    name     varchar(25) NOT NULL,
    login    varchar(25) NOT NULL,
    birthday date        NOT NULL
);

CREATE TABLE if not exists Mpa
(
    id_mpa INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa    varchar(25) NOT NULL
);

CREATE TABLE if not exists Film
(
    id_film      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar(50)  NOT NULL,
    description  varchar(200) NOT NULL,
    release_date date         NOT NULL CHECK (release_date > '1895-11-28'),
    duration     int          NOT NULL CHECK (duration > 0),
    id_mpa       INTEGER,
    FOREIGN KEY (id_mpa) references Mpa (id_mpa)
);

CREATE TABLE if not exists Genre
(
    id_genre INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre    varchar(20) NOT NULL
);

CREATE TABLE if not exists FilmGenre
(
    id_film  INTEGER NOT NULL,
    id_genre INTEGER NOT NULL,
    FOREIGN KEY (id_film) references Film (id_film),
    FOREIGN KEY (id_genre) references Genre (id_genre)
);

CREATE TABLE if not exists StatusFriendship
(
    id_status INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status    boolean NOT NULL
);

CREATE TABLE if not exists Likes
(
    id_film INTEGER NOT NULL,
    id_user INTEGER NOT NULL,
    FOREIGN KEY (id_film) references Film (id_film),
    FOREIGN KEY (id_user) references Users (id_user)
);

CREATE TABLE if not exists Friendship
(
    id_user   INTEGER NOT NULL,
    id_friend INTEGER NOT NULL,
    id_status INTEGER NOT NULL,
    FOREIGN KEY (id_user) references Users (id_user),
    FOREIGN KEY (id_friend) references Users (id_user),
    FOREIGN KEY (id_status) references StatusFriendship (id_status)
);